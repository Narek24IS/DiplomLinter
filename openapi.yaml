components:
  schemas:
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    LinterResult:
      properties:
        details:
          anyOf:
          - type: object
          - type: 'null'
          title: Details
        is_success:
          title: Is Success
          type: boolean
        linter_name:
          title: Linter Name
          type: string
        linter_result_id:
          title: Linter Result Id
          type: integer
        output:
          anyOf:
          - type: string
          - type: 'null'
          title: Output
        scan_id:
          title: Scan Id
          type: integer
      required:
      - linter_name
      - is_success
      - linter_result_id
      - scan_id
      title: LinterResult
      type: object
    LinterStats:
      properties:
        linter_name:
          title: Linter Name
          type: string
        success_rate:
          title: Success Rate
          type: number
        total_runs:
          title: Total Runs
          type: integer
      required:
      - linter_name
      - total_runs
      - success_rate
      title: LinterStats
      type: object
    Project:
      properties:
        created_at:
          format: date-time
          title: Created At
          type: string
        name:
          title: Name
          type: string
        owner_id:
          title: Owner Id
          type: integer
        project_id:
          title: Project Id
          type: integer
        repository_url:
          title: Repository Url
          type: string
      required:
      - name
      - repository_url
      - project_id
      - created_at
      - owner_id
      title: Project
      type: object
    ProjectCreate:
      properties:
        name:
          title: Name
          type: string
        repository_url:
          title: Repository Url
          type: string
        token:
          title: Token
          type: string
      required:
      - name
      - repository_url
      - token
      title: ProjectCreate
      type: object
    ProjectWithScans:
      properties:
        created_at:
          format: date-time
          title: Created At
          type: string
        name:
          title: Name
          type: string
        owner_id:
          title: Owner Id
          type: integer
        project_id:
          title: Project Id
          type: integer
        repository_url:
          title: Repository Url
          type: string
        scans:
          items:
            $ref: '#/components/schemas/Scan'
          title: Scans
          type: array
      required:
      - name
      - repository_url
      - project_id
      - created_at
      - owner_id
      - scans
      title: ProjectWithScans
      type: object
    Scan:
      properties:
        branch:
          title: Branch
          type: string
        finished_at:
          anyOf:
          - format: date-time
            type: string
          - type: 'null'
          title: Finished At
        project_id:
          title: Project Id
          type: integer
        scan_id:
          title: Scan Id
          type: integer
        started_at:
          format: date-time
          title: Started At
          type: string
        status:
          title: Status
          type: string
        total_errors:
          default: 0
          title: Total Errors
          type: integer
        total_warnings:
          default: 0
          title: Total Warnings
          type: integer
      required:
      - branch
      - scan_id
      - project_id
      - status
      - started_at
      title: Scan
      type: object
    ScanWithResults:
      properties:
        branch:
          title: Branch
          type: string
        finished_at:
          anyOf:
          - format: date-time
            type: string
          - type: 'null'
          title: Finished At
        linter_results:
          items:
            $ref: '#/components/schemas/LinterResult'
          title: Linter Results
          type: array
        project_id:
          title: Project Id
          type: integer
        scan_id:
          title: Scan Id
          type: integer
        started_at:
          format: date-time
          title: Started At
          type: string
        status:
          title: Status
          type: string
        total_errors:
          default: 0
          title: Total Errors
          type: integer
        total_warnings:
          default: 0
          title: Total Warnings
          type: integer
      required:
      - branch
      - scan_id
      - project_id
      - status
      - started_at
      - linter_results
      title: ScanWithResults
      type: object
    User:
      properties:
        created_at:
          format: date-time
          title: Created At
          type: string
        user_id:
          title: User Id
          type: integer
        username:
          title: Username
          type: string
      required:
      - username
      - user_id
      - created_at
      title: User
      type: object
    UserCreate:
      properties:
        token:
          title: Token
          type: string
        username:
          title: Username
          type: string
      required:
      - username
      - token
      title: UserCreate
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
info:
  title: Super Linter
  version: 0.0.0
openapi: 3.1.0
paths:
  /linter-results/scan/{scan_id}:
    get:
      operationId: get_scan_results
      parameters:
      - in: path
        name: scan_id
        required: true
        schema:
          title: Scan Id
          type: integer
      - in: header
        name: Authorization
        required: true
        schema:
          title: Authorization
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LinterResult'
                title: Response Get Scan Results
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Scan Results
      tags:
      - linter_results
  /linter-results/stats/{scan_id}:
    get:
      operationId: get_scan_stats
      parameters:
      - in: path
        name: scan_id
        required: true
        schema:
          title: Scan Id
          type: integer
      - in: header
        name: Authorization
        required: true
        schema:
          title: Authorization
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LinterStats'
                title: Response Get Scan Stats
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Scan Stats
      tags:
      - linter_results
  /linter-results/{linter_result_id}:
    get:
      operationId: get_linter_results
      parameters:
      - in: path
        name: linter_result_id
        required: true
        schema:
          title: Linter Result Id
          type: integer
      - in: header
        name: Authorization
        required: true
        schema:
          title: Authorization
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LinterResult'
                title: Response Get Linter Results
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Linter Results
      tags:
      - linter_results
  /projects/:
    get:
      operationId: get_projects
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
      - in: header
        name: Authorization
        required: true
        schema:
          title: Authorization
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                title: Response Get Projects
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Projects
      tags:
      - projects
    post:
      operationId: create_project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create Project
      tags:
      - projects
  /projects/by_id/{project_id}:
    get:
      operationId: get_project_by_id
      parameters:
      - in: path
        name: project_id
        required: true
        schema:
          title: Project Id
          type: integer
      - in: header
        name: Authorization
        required: true
        schema:
          title: Authorization
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectWithScans'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Project By Id
      tags:
      - projects
  /projects/by_name/{project_name}:
    get:
      operationId: get_project_by_name
      parameters:
      - in: path
        name: project_name
        required: true
        schema:
          title: Project Name
          type: string
      - in: header
        name: Authorization
        required: true
        schema:
          title: Authorization
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectWithScans'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Project By Name
      tags:
      - projects
  /scans/:
    get:
      operationId: get_scans
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
      - in: header
        name: Authorization
        required: true
        schema:
          title: Authorization
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScanWithResults'
                title: Response Get Scans
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Scans
      tags:
      - scans
  /scans/project/{project_id}:
    get:
      operationId: get_project_scans
      parameters:
      - in: path
        name: project_id
        required: true
        schema:
          title: Project Id
          type: integer
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
      - in: header
        name: Authorization
        required: true
        schema:
          title: Authorization
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Scan'
                title: Response Get Project Scans
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Project Scans
      tags:
      - scans
  /scans/{project_id}/start:
    post:
      operationId: start_scan
      parameters:
      - in: path
        name: project_id
        required: true
        schema:
          title: Project Id
          type: integer
      - in: query
        name: branch
        required: true
        schema:
          title: Branch
          type: string
      - in: header
        name: Authorization
        required: true
        schema:
          title: Authorization
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Start Scan
      tags:
      - scans
  /scans/{scan_id}:
    get:
      operationId: get_scan
      parameters:
      - in: path
        name: scan_id
        required: true
        schema:
          title: Scan Id
          type: integer
      - in: header
        name: Authorization
        required: true
        schema:
          title: Authorization
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanWithResults'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Scan
      tags:
      - scans
  /technical/ping:
    get:
      operationId: ping
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Ping
      tags:
      - technical
  /technical/ready:
    get:
      description: 'Ручка для проверки готовности контейнера.

        :param consumer: Коннект к кролику для обработки сообщений

        :param publisher: Коннект к кролику для публикации сообщений с результатами

        :return: 200 если оба коннекта готовы, 500 в противном случае'
      operationId: ready_check
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Ready Check
      tags:
      - technical
  /users/:
    get:
      operationId: get_users
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                title: Response Get Users
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Users
      tags:
      - users
    post:
      operationId: create_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create User
      tags:
      - users
  /users/{token}:
    get:
      operationId: get_user_by_token
      parameters:
      - in: path
        name: token
        required: true
        schema:
          title: Token
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get User By Token
      tags:
      - users
