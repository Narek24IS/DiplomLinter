import asyncio
import time

from linter_api_client import ApiClient, Configuration, ApiException
from linter_api_client.api import (
    UsersApi,
    ProjectsApi,
    ScansApi,
    LinterResultsApi
)
from linter_api_client.models import (
    UserCreate,
    ProjectCreate,
)

def full_flow():
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
    config = Configuration(host="http://localhost:8000")
    token = "test_token_123"
    project_name = "Paginator Bot"
    repo_url = "https://github.com/Narek24IS/PaginatorBot.git"
    project_name = "Cure Bot"
    repo_url = "https://github.com/Narek24IS/CuteBot.git"
    with ApiClient(config) as api_client:
        users_api = UsersApi(api_client)
        projects_api = ProjectsApi(api_client)
        scans_api = ScansApi(api_client)
        results_api = LinterResultsApi(api_client)

        # 2. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("‚è≥ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        try:
            user = users_api.create_user(
                user_create=UserCreate(
                    username="test_user",
                    token=token
                )
            )
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.user_id} {user.username}")
        except ApiException as e:
            user = users_api.get_user_by_token(token)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω: {user.user_id} {user.username}")
        token = "Bearer " + token
        try:
            # 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            print("\n‚è≥ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç...")
            project = projects_api.create_project(
                project_create=ProjectCreate(
                    name=project_name,
                    repository_url=repo_url,
                    token="test_token_123"
                )
            )
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {project.project_id} {project.name}")
        except Exception as e:
            try:
                project = projects_api.get_project_by_name(project_name, token)
                print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {project.project_id} {project.name}")
            except Exception as e:
                print(e)
                raise e

        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\n‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        scan = scans_api.start_scan(
            project_id=project.project_id,
            branch="master",
            authorization=token
        )
        print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: {scan.scan_id}")

        # 5. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        print("\n‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        while True:
            current_scan = scans_api.get_scan(scan.scan_id, authorization=token)
            if current_scan.status == "completed":
                break
            elif current_scan.status == "failed":
                print("‚ùå –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π")
                return
            time.sleep(2)
        print("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        # 6. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n‚è≥ –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        results = results_api.get_scan_results(scan.scan_id, authorization=token)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for result in results:
            print(f"  - {result.linter_name}: {'‚úÖ' if result.is_success else '‚ùå'}")

        # 7. –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        print("\n‚è≥ –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É...")
        stats = results_api.get_scan_stats(scan.scan_id, authorization=token)
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–Ω—Ç–µ—Ä–∞–º:")
        for stat in stats:
            print(
                f"  - {stat.linter_name}: "
                f"–í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤ {stat.total_runs}, "
                f"–£—Å–ø–µ—à–Ω–æ {stat.success_rate:.0%}, "
            )

        # 8. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        print("\n‚è≥ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ...")
        full_project = projects_api.get_project_by_id(project.project_id, authorization=token)
        print(f"üìÇ –ü—Ä–æ–µ–∫—Ç: {full_project.name}")
        print(f"üîó URL: {full_project.repository_url}")
        print(f"üîÑ –í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(full_project.scans)}")

if __name__ == "__main__":
    full_flow()